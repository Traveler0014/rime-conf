# Rime schema
# vim: set sw=2 sts=2 et:
# encoding: utf-8

schema:
  schema_id: japanese
  name: 日本語
  version: 'v0.1'
  author:
    - ensigma96 <ensigma96@gmail.com>
    - travon <zhouyanbai@qq.com>
  dependencies:
    - double_pinyin_flypy

switches:
  - name: ascii_mode
    reset: 0
    states: [ 日文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: ascii_punct
    states: [ '。，', '. ,' ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - script_translator
    - reverse_lookup_translator
  filters:
    - uniquifier


speller:
  alphabet: 'zyxwvutsrqponmlkjihgfedcba-_'
  delimiter: " '"
  algebra:
    - 'derive/_/x/'
    - 'derive/-/q/'
    # Add / remove rules the as you wish
    - 'derive/i_e/ye/'
    # - 'derive/fu/hu/'

translator:
  dictionary: japanese
  spelling_hints: 5
  comment_format:
    - 'xlit|q|ー|'
  preedit_format:
    - 'xlit|q|ー|'

reverse_lookup:
  dictionary: luna_pinyin
  enable_completion: true
  prefix: "`"
  suffix: "`"
  tips: 〔漢字反查〕
  prism: double_pinyin_flypy
  preedit_format:
    - "xform/([bpmfdtnljqx])n/$1iao/"
    - "xform/(\\w)g/$1eng/"
    - "xform/(\\w)q/$1iu/"
    - "xform/(\\w)w/$1ei/"
    - "xform/([dtnlgkhjqxyvuirzcs])r/$1uan/"
    - "xform/(\\w)t/$1ve/"
    - "xform/(\\w)y/$1un/"
    - "xform/([dtnlgkhvuirzcs])o/$1uo/"
    - "xform/(\\w)p/$1ie/"
    - "xform/([jqx])s/$1iong/"
    - "xform/(\\w)s/$1ong/"
    - "xform/(\\w)d/$1ai/"
    - "xform/(\\w)f/$1en/"
    - "xform/(\\w)h/$1ang/"
    - "xform/(\\w)j/$1an/"
    - "xform/([gkhvuirzcs])k/$1uai/"
    - "xform/(\\w)k/$1ing/"
    - "xform/([jqxnl])l/$1iang/"
    - "xform/(\\w)l/$1uang/"
    - "xform/(\\w)z/$1ou/"
    - "xform/([gkhvuirzcs])x/$1ua/"
    - "xform/(\\w)x/$1ia/"
    - "xform/(\\w)c/$1ao/"
    - "xform/([dtgkhvuirzcs])v/$1ui/"
    - "xform/(\\w)b/$1in/"
    - "xform/(\\w)m/$1ian/"
    - "xform/([aoe])\\1(\\w)/$1$2/"
    - "xform/(^|[ '])v/$1zh/"
    - "xform/(^|[ '])i/$1ch/"
    - "xform/(^|[ '])u/$1sh/"
    - "xform/([jqxy])v/$1u/"
    - "xform/([nl])v/$1ü/"

punctuator:
  import_preset: default

key_binder:
  bindings:
    - {accept: "Control+p", send: Up, when: composing}
    - {accept: "Control+n", send: Down, when: composing}
    - {accept: "Control+b", send: Left, when: composing}
    - {accept: "Control+f", send: Right, when: composing}
    - {accept: "Control+a", send: Home, when: composing}
    - {accept: "Control+e", send: End, when: composing}
    - {accept: "Control+d", send: Delete, when: composing}
    - {accept: "Control+k", send: "Shift+Delete", when: composing}
    - {accept: "Control+h", send: BackSpace, when: composing}
    - {accept: "Control+g", send: Escape, when: composing}
    - {accept: "Control+bracketleft", send: Escape, when: composing}
    - {accept: "Alt+v", send: Page_Up, when: composing}
    - {accept: "Control+v", send: Page_Down, when: composing}
    - {accept: ISO_Left_Tab, send: "Shift+Left", when: composing}
    - {accept: "Shift+Tab", send: "Shift+Left", when: composing}
    - {accept: Tab, send: "Shift+Right", when: composing}
    - {accept: "Control+Shift+1", select: .next, when: always}
    - {accept: "Control+Shift+n", select: japanese, when: always}
    - {accept: "Control+Shift+N", select: japanese, when: always}
    - {accept: "Control+Shift+z", select: double_pinyin_flypy, when: always}
    - {accept: "Control+Shift+Z", select: double_pinyin_flypy, when: always}
    - {accept: minus, send: Page_Up, when: has_menu}
    - {accept: equal, send: Page_Down, when: has_menu}
    - {accept: comma, send: Page_Up, when: paging}
    - {accept: period, send: Page_Down, when: has_menu}
    - {accept: "Control+Shift+l", select: international, when: always}
    - {accept: "Control+Shift+L", select: international, when: always}
    - {accept: "F16", select: .next, when: always}
    - {accept: "F19", select: international, when: always}

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*`?$"
