# Rime schema
# vim: set sw=2 sts=2 et:
# encoding: utf-8

schema:
  schema_id: japanese
  name: 日本語
  version: 'v0.1'
  author:
    - ensigma96 <ensigma96@gmail.com>
    - travon <zhouyanbai@qq.com>
  dependencies:
    # - terra_pinyin.extended # for using reverse lookup
    - stroke

switches:
  - name: ascii_mode
    reset: 0
    states: [ 日文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  # - name: simplification
  #   states: [ 漢字, 汉字 ]
  #- options: [jp_variants, zh_simp, zh_tw ]
  #- options: [zh_simp, zh_tw ]
  #  reset: 0
  #  states:
  #    #- 字形 → 日本
  #    - 字形 → 大陸
  #    - 字形 → 台灣
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - script_translator
    - reverse_lookup_translator
  filters:
    # - simplifier
    #- simplifier@jp_variants
    #- simplifier@zh_simp
    #- simplifier@zh_tw
    - uniquifier


speller:
  alphabet: 'zyxwvutsrqponmlkjihgfedcba-_'
  delimiter: " '"
  algebra:
    - 'derive/_/x/'
    - 'derive/-/q/'
    # Add / remove rules the as you wish
    - 'derive/i_e/ye/'
    # - 'derive/fu/hu/'

translator:
  dictionary: japanese
  spelling_hints: 5
  comment_format:
    - 'xlit|q|ー|'
  preedit_format:
    - 'xlit|q|ー|'


# simplifier:
#  option_name: jp_variants
#  opencc_config: jp_t2s.json

reverse_lookup:
  # dictionary: stroke
  dictionary: stroke
  enable_completion: true
  prefix: "`"
  suffix: "`"
  tips: 〔筆畫〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/
  comment_format:
    - 'xlit|q|ー|'

punctuator:
  import_preset: default

key_binder:
  bindings:
    - {accept: "Control+p", send: Up, when: composing}
    - {accept: "Control+n", send: Down, when: composing}
    - {accept: "Control+b", send: Left, when: composing}
    - {accept: "Control+f", send: Right, when: composing}
    - {accept: "Control+a", send: Home, when: composing}
    - {accept: "Control+e", send: End, when: composing}
    - {accept: "Control+d", send: Delete, when: composing}
    - {accept: "Control+k", send: "Shift+Delete", when: composing}
    - {accept: "Control+h", send: BackSpace, when: composing}
    - {accept: "Control+g", send: Escape, when: composing}
    - {accept: "Control+bracketleft", send: Escape, when: composing}
    - {accept: "Alt+v", send: Page_Up, when: composing}
    - {accept: "Control+v", send: Page_Down, when: composing}
    - {accept: ISO_Left_Tab, send: "Shift+Left", when: composing}
    - {accept: "Shift+Tab", send: "Shift+Left", when: composing}
    - {accept: Tab, send: "Shift+Right", when: composing}
    - {accept: "Control+Shift+1", select: .next, when: always}
    - {accept: "Control+Shift+n", select: japanese, when: always}
    - {accept: "Control+Shift+N", select: japanese, when: always}
    - {accept: "Control+Shift+z", select: double_pinyin_flypy, when: always}
    - {accept: "Control+Shift+Z", select: double_pinyin_flypy, when: always}
    - {accept: minus, send: Page_Up, when: has_menu}
    - {accept: equal, send: Page_Down, when: has_menu}
    - {accept: comma, send: Page_Up, when: paging}
    - {accept: period, send: Page_Down, when: has_menu}
    - {accept: "Control+Shift+l", select: international, when: always}
    - {accept: "Control+Shift+L", select: international, when: always}
    - {accept: "F16", select: .next, when: always}
    - {accept: "F19", select: international, when: always}

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*`?$"
